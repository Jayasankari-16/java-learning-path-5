/* Sasuke and Itachi are playing a game. Sasuke first creates an array 
A containing N positive integers A1 ,A2 ,…,A N . He then creates a new array B of length N such that gcd(A1A2,..,Ai)Bi=gcd(A1,A2,...,Ai) for each 1≤i≤N.
Now, Sasuke gives array B to Itachi and asks him to find any array A (with 1≤Ai≤109) such that the given process applied to A will produce B.
Can you help Itachi solve this problem? */

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.Random;
import java.util.StringTokenizer;

class cp {
    static final Random random = new Random();
    static FastReader in = new FastReader();
    static long mod = 1000000007L;

    public static void main(String[] args) throws IOException {
        PrintWriter out = new PrintWriter(System.out);
        int tc = in.nextInt();
        while (tc-- > 0) {
            int n = in.nextInt();
            long[] a = in.readlongarray(n);
            int c = 1;
            for (int i = 1; i < n; i++) {
                if(a[i]>a[i-1] || a[i-1]%a[i]!=0){
                    c=0; break;
                }
            }
            if(c==0)
                out.println(-1);
            else
                for(long ele: a)
                    out.print(ele+" ");
            out.println();
        }
        out.close();
    }

    static void debug(Object... o) {
        System.err.println(Arrays.deepToString(o));
    }


    /* Fast Input Template */
    static class FastReader {
        BufferedReader br;
        StringTokenizer st;

        public FastReader() {
            br = new BufferedReader(new InputStreamReader(System.in));
        }

        String next() {
            while (st == null || !st.hasMoreElements()) {
                try {
                    st = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }

        int nextInt() {
            return Integer.parseInt(next());
        }

        long nextLong() {
            return Long.parseLong(next());
        }

        double nextDouble() {
            return Double.parseDouble(next());
        }

        String nextLine() {
            String str = "";
            try {
                str = br.readLine();
            } catch (IOException e) {
                e.printStackTrace();
            }
            return str;
        }

        int[] readintarray(int n) {
            int[] res = new int[n];
            for (int i = 0; i < n; i++) res[i] = nextInt();
            return res;
        }

        long[] readlongarray(int n) {
            long[] res = new long[n];
            for (int i = 0; i < n; i++) res[i] = nextLong();
            return res;
        }
    }

}
