/* Chef has two numbers N and M. Help Chef to find number of integer N-tuples (A1,A2,…,AN) such that 0≤A1 ,A2 ,…,AN ≤2M −1 and A1&A2&…&AN=0,
where & denotes the bitwise AND operator.Since the number of tuples can be large, output it modulo 109 +7.*/


import java.util.*;
import java.lang.*;
import java.io.*;

class Codechef
{
    private static BufferedReader reader=new BufferedReader(new InputStreamReader(System.in));
	private static BufferedWriter writer=new BufferedWriter(new OutputStreamWriter(System.out));
	private static long mod=(long)1E9+7L;
	
	public static void main (String[] args) throws java.lang.Exception
	{
		int tt=Integer.parseInt(reader.readLine().trim());
		while(tt-->0){
		    int[] a=parseInt(reader.readLine().trim(), 2);
		    int n=a[0], m=a[1];
		    if(n==1){
		        writer.write("1\n");
		        continue;
		    }
		    long power=power(2, n)-1L;
		    power=power(power, m);
		    writer.write(power+"\n");
		}
		writer.flush();
	}
	
	private static long power(long a, long b){
	    if(b==1){
	        return a;
	    }else if(b==0){
	        return 1L;
	    }
	    long half=power(a, b>>1);
	    half=mod(half, mod);
	    long p=mod(half*half, mod);
	    if((b&1)!=0){
	        return mod(p*a, mod);
	    }
	    return p;
	}
	
	private static long mod(long n, long m){
	    if(n>=0){
	        return n%m;
	    }
	    return ((m-Math.abs(n)%m))%m;
	}
	
	private static void printArray(int[] nums) throws java.lang.Exception{
	    for(int i=0;i<nums.length;i++){
	        writer.write((i==0?"":" ")+nums[i]);
	    }
	    writer.write("\n");
	}
	
	private static void printArray(long[] nums) throws java.lang.Exception{
	    for(int i=0;i<nums.length;i++){
	        writer.write((i==0?"":" ")+nums[i]);
	    }
	    writer.write("\n");
	}
    
    private static int[] parseInt(String str) {
        String[] parts=str.split("\\s+");
        int[] ans=new int[parts.length];
        for(int i=0;i<ans.length;i++){
            ans[i]=Integer.parseInt(parts[i]);
        }
        return ans;
    }

    private static long[] parseLong(String str) {
        String[] parts=str.split("\\s+");
        long[] ans=new long[parts.length];
        for(int i=0;i<ans.length;i++){
            ans[i]=Long.parseLong(parts[i]);
        }
        return ans;
    }
    
    private static int[] parseInt(String str, int n) {
        int[] ans = new int[n];
        int idx = 0;
        for (int k = 0; k < str.length(); ) {
            int j = k;
            int sum = 0;
            while (j < str.length() && str.charAt(j) != ' ') {
                if (str.charAt(j) == '-') {
                    j++;
                    continue;
                }
                sum = sum * 10 + str.charAt(j) - '0';
                j++;
            }
            ans[idx++] = (str.charAt(k) == '-' ? -1 : 1) * sum;
            k = j + 1;
        }
        return ans;
    }
    
    private static long[] parseLong(String str, int n) {
        long[] ans = new long[n];
        int idx = 0;
        for (int k = 0; k < str.length(); ) {
            int j = k;
            long sum = 0L;
            while (j < str.length() && str.charAt(j) != ' ') {
                if (str.charAt(j) == '-') {
                    j++;
                    continue;
                }
                sum = sum * 10 + str.charAt(j) - '0';
                j++;
            }
            ans[idx++] = (str.charAt(k) == '-' ? -1L : 1L) * sum;
            k = j + 1;
        }
        return ans;
    }
}
