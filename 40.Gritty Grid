/* They can only meet at the common cell after Alice has just completed her move i.e.
they should not meet in the middle of anyone's move or at the end of Bob's move. 
The first time that they meet should be right after a move of Alice, and they stop moving after that.
Alice makes a move first, then Bob makes a move, and they alternate like this.Alice and Bob want to know if it is possible to meet with these restrictions. 
Please help Alice and Bob by telling them whether they would be able to meet each other if they stick to these restrictions.*/

import java.util.*;
import java.lang.*;
import java.io.*;
class Codechef
{
    private static BufferedReader reader=new BufferedReader(new InputStreamReader(System.in));
	private static BufferedWriter writer=new BufferedWriter(new OutputStreamWriter(System.out));
	private static long mod=(long)1E9+7L;
	
	public static void main (String[] args) throws java.lang.Exception
	{
		int tt=Integer.parseInt(reader.readLine().trim());
		while(tt-->0){
		    int[] a=parseInt(reader.readLine().trim());
		    int n=a[0], m=a[1], x=a[2], y=a[3];
		    int d=n+m-2;
		    if((x&1)==0 && (d&1)==0 && x>=d){
		        writer.write("YES\n");
		        continue;
		    }
		    x%=2;
		    y%=2;
		    if(x==1 && y==0){
		        writer.write("YES\n");
		    }else if(x==1 && y==1){
		        writer.write((d%2)==1?"YES\n":"NO\n");
		    }else if(x==0 && y==1){
		        writer.write("YES\n");
		    }else{
		        writer.write((d%2==0?"YES\n":"NO\n"));
		    }
		}
		writer.flush();
	}
	
	private static long mod(long n, long m){
	    if(n>=0){
	        return n%m;
	    }
	    return ((m-Math.abs(n)%m))%m;
	}
	
	private static void printArray(int[] nums) throws java.lang.Exception{
	    for(int i=0;i<nums.length;i++){
	        writer.write((i==0?"":" ")+nums[i]);
	    }
	    writer.write("\n");
	}
	
	private static void printArray(long[] nums) throws java.lang.Exception{
	    for(int i=0;i<nums.length;i++){
	        writer.write((i==0?"":" ")+nums[i]);
	    }
	    writer.write("\n");
	}
    
    private static int[] parseInt(String str) {
        String[] parts=str.split("\\s+");
        int[] ans=new int[parts.length];
        for(int i=0;i<ans.length;i++){
            ans[i]=Integer.parseInt(parts[i]);
        }
        return ans;
    }

    private static long[] parseLong(String str) {
        String[] parts=str.split("\\s+");
        long[] ans=new long[parts.length];
        for(int i=0;i<ans.length;i++){
            ans[i]=Long.parseLong(parts[i]);
        }
        return ans;
    }
    
    private static int[] parseInt(String str, int n) {
        int[] ans = new int[n];
        int idx = 0;
        for (int k = 0; k < str.length(); ) {
            int j = k;
            int sum = 0;
            while (j < str.length() && str.charAt(j) != ' ') {
                if (str.charAt(j) == '-') {
                    j++;
                    continue;
                }
                sum = sum * 10 + str.charAt(j) - '0';
                j++;
            }
            ans[idx++] = (str.charAt(k) == '-' ? -1 : 1) * sum;
            k = j + 1;
        }
        return ans;
    }
    
    private static long[] parseLong(String str, int n) {
        long[] ans = new long[n];
        int idx = 0;
        for (int k = 0; k < str.length(); ) {
            int j = k;
            long sum = 0L;
            while (j < str.length() && str.charAt(j) != ' ') {
                if (str.charAt(j) == '-') {
                    j++;
                    continue;
                }
                sum = sum * 10 + str.charAt(j) - '0';
                j++;
            }
            ans[idx++] = (str.charAt(k) == '-' ? -1L : 1L) * sum;
            k = j + 1;
        }
        return ans;
    }
}
