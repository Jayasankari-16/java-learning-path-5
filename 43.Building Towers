/* Chef is given a contract to build towers in Chefland which are made by stacking blocks one above the other.
Initially, there is only 1 block in the inventory and no tower has been built. Chef follows the following 2 steps in each operation:
Either build a new tower or update an existing tower that has been built in previous operations using any number of blocks currently present in the inventory. 
After this step, the size of the inventory reduces by the number of blocks used.
Suppose the tower Chef updated or built has B blocks after the step, Chef gets to add B new blocks to the inventory as a reward.
Find the maximum number of towers of height X that Chef can build in M operations.*/

import java.util.*;
import java.lang.*;
import java.io.*;

class Codechef
{
	public static void main (String[] args) throws java.lang.Exception
	{
		FastReader sc=new FastReader();
		PrintWriter out=new PrintWriter(System.out);
		int test=sc.nextInt();
		while(test-->0){
		   int x=sc.nextInt();
		   long m=sc.nextLong();
		   long h=0;
		   long t=1;
		   while(h<x){
		       h+=t;
		       m--;
		       t=h;
		   }
		   if(m<0) out.println(0);
		   else out.println(m+1);
		}
		out.close();
	}
	static class FastReader {
		BufferedReader br;
		StringTokenizer st;

		public FastReader() {
			br = new BufferedReader(
					new InputStreamReader(System.in));
		}

		String next() {
			while (st == null || !st.hasMoreElements()) {
				try {
					st = new StringTokenizer(br.readLine());
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			return st.nextToken();
		}

		int nextInt() {
			return Integer.parseInt(next());
		}

		long nextLong() {
			return Long.parseLong(next());
		}

		double nextDouble() {
			return Double.parseDouble(next());
		}

		String nextLine() {
			String str = "";
			try {
				str = br.readLine();
			} catch (IOException e) {
				e.printStackTrace();
			}
			return str;
		}
	}
}
