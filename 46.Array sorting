/* You are given an unsorted permutation P of size N.
An operation is defined as:Swap Pi and i+K for any i in the range [1,Nâˆ’K].
Find the maximum value of K, such that, the permutation P can be sorted by applying any finite number of operations.
Note that, a permutation of size N contains all integers from 1 to N exactly once.*/

import java.io.PrintWriter;
import java.lang.*;
import java.util.*;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

class Codechef {

    public void run(String[] args){
        main(args);
    }

    static class FastInput {
        BufferedReader br;
        StringTokenizer st;
        public FastInput() {
            br = new BufferedReader(
                    new InputStreamReader(System.in));
        }
        String next() {
            while (st == null || !st.hasMoreElements()) {
                try {
                    st = new StringTokenizer(br.readLine());
                }
                catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }

        int nextInt() { return Integer.parseInt(next()); }
        long nextLong() { return Long.parseLong(next()); }
        double nextDouble() { return Double.parseDouble(next()); }

        String nextLine() {
            String str = "";
            try {
                if(st.hasMoreTokens()){
                    str = st.nextToken("\n");
                }
                else{
                    str = br.readLine();
                }
            }
            catch (IOException e) {
                e.printStackTrace();
            }
            return str;
        }
    }
    static PrintWriter out;
    static FastInput in;
    public static void main(String[] args) {
        out = new PrintWriter(System.out);
        in = new FastInput();

        int t = in.nextInt();

        for(int i = 1; i <= t; i++){
            solve();
        }

        out.close();
    }

    static class Pair{
        int a;
        int ind;
        Pair(int a, int ind){
            this.a = a;
            this.ind = ind;
        }
    }
    public static int[] get_Input_Array(int n){
        int[] a = new int[n];
        for(int i = 0; i < n; i++)
            a[i] = in.nextInt();
        return a;
    }
    public static void print_Array(int[] a){
        for (int j : a)
            out.print(j + " ");
        out.println();
    }

    public static int gcd(int a, int b){
        if(a == 0)
            return b;
        return gcd(b%a, a);
    }


    public static void solve() {
        int i, j, k, n = in.nextInt();
        int[] a = get_Input_Array(n);
        int hcf = 0;
        for(i = 0; i < n; i++){
            int diff = Math.abs(a[i] - i - 1);
            hcf = gcd(hcf, diff);
        }
        out.println(hcf);
    }

}
