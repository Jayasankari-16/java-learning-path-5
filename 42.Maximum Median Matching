/* N boys and N girls attend a dance class, where N is odd.
For today's practice session, they need to form N boy-girl pairs.
The i-th boy has a happiness value of Ai and the i-th girl has a happiness value of Bi.
A pair consisting of the i-th boy and the j-th girl has a happiness value of Ai +Bj. 
Let the happiness values of the N pairs be C1,C2,…,CN . The dance instructor would like it if many of the pairs have a high happiness value, and passes the task to you — find the maximum possible value of the median of C,
if the boy-girl pairs are chosen optimally.*

import java.util.*;
import java.lang.*;
import java.io.*
class Codechef
{
    private static BufferedReader reader=new BufferedReader(new InputStreamReader(System.in));
	private static BufferedWriter writer=new BufferedWriter(new OutputStreamWriter(System.out));
	private static long mod=(long)1E9+7L;
	
	public static void main (String[] args) throws java.lang.Exception
	{
		int tt=Integer.parseInt(reader.readLine().trim());
		while(tt-->0){
		    int n=Integer.parseInt(reader.readLine().trim());
		    int[] a=parseInt(reader.readLine().trim());
		    int[] b=parseInt(reader.readLine().trim());
		    Arrays.sort(a);
		    Arrays.sort(b);
		    for(int i=n/2, j=n-1;i<j && i<n && j>=0;i++, j--){
		        int temp=b[i];
		        b[i]=b[j];
		        b[j]=temp;
		    }
		    long ans=Long.MAX_VALUE;
		    for(int i=n/2;i<n;i++){
		        ans=Math.min(ans, a[i]+0L+b[i]);
		    }
		    
		    writer.write(ans+"\n");
		}
		writer.flush();
	}
	
	private static long mod(long n, long m){
	    if(n>=0){
	        return n%m;
	    }
	    return ((m-Math.abs(n)%m))%m;
	}
	
	private static void printArray(int[] nums) throws java.lang.Exception{
	    for(int i=0;i<nums.length;i++){
	        writer.write((i==0?"":" ")+nums[i]);
	    }
	    writer.write("\n");
	}
	
	private static void printArray(long[] nums) throws java.lang.Exception{
	    for(int i=0;i<nums.length;i++){
	        writer.write((i==0?"":" ")+nums[i]);
	    }
	    writer.write("\n");
	}
    
    private static int[] parseInt(String str) {
        String[] parts=str.split("\\s+");
        int[] ans=new int[parts.length];
        for(int i=0;i<ans.length;i++){
            ans[i]=Integer.parseInt(parts[i]);
        }
        return ans;
    }

    private static long[] parseLong(String str) {
        String[] parts=str.split("\\s+");
        long[] ans=new long[parts.length];
        for(int i=0;i<ans.length;i++){
            ans[i]=Long.parseLong(parts[i]);
        }
        return ans;
    }
}

