/* Given an integer N, consider all arrays A of size N such that:
All the elements are non-negative and distinct.All prefix sums are odd.
Formally, for all i such that 1≤i≤N, ∑j=1i Aj is odd.Among all possible arrays A, output the smallest possible sum of the elements of the array.
Note: Since the Input/Output may be large, it is preferred to use fast I/O. */
import java.util.*;
import java.io.*;

class ChefDoughnuts {
    public static void main(String[] args) throws java.lang.Exception {
        InputReader reader = new InputReader();  // Input handling with a new custom class
        PrintWriter writer = new PrintWriter(System.out);
        
        int testCases = reader.nextInt();
        
        for (int t = 0; t < testCases; t++) {
            int n = reader.nextInt();  // Read number of doughnuts
            
            // Handle case when n is 2 or less (special condition)
            if (n <= 2) {
                writer.println(1);
            } else {
                // Calculate the minimum cuts required for the doughnut chain
                long result = (long)(n - 1) * (n - 2) + 1;
                writer.println(result);
            }
        }
        writer.flush(); 
    }
    static class InputReader {
        BufferedReader bufferedReader;
        StringTokenizer tokenizer;

        public InputReader() {
            bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        }

        String next() {
            while (tokenizer == null || !tokenizer.hasMoreElements()) {
                try {
                    tokenizer = new StringTokenizer(bufferedReader.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return tokenizer.nextToken();
        }
        int nextInt() {
            return Integer.parseInt(next());
        }
        long nextLong() {
            return Long.parseLong(next());
        }
        double nextDouble() {
            return Double.parseDouble(next());
        }

        String nextLine() {
            String str = "";
            try {
                str = bufferedReader.readLine();
            } catch (IOException e) {
                e.printStackTrace();
            }
            return str;
        }

        int[] readIntArray(int size) throws IOException {
            int[] array = new int[size];
            for (int i = 0; i < size; i++) {
                array[i] = nextInt();
            }
            return array;
        }
    }
}
