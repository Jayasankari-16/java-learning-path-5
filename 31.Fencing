/* There is a field with plants â€” a grid with N rows (numbered 1 through N) and M columns (numbered 1 through M);
out of its NM cells, K cells contain plants, while the rest contain weeds. Two cells are adjacent if they have a common side.
You want to build fences in the field in such a way that the following conditions hold for each cell that contains a plant:
it is possible to move from this cell to each adjacent cell containing a plant without crossing any fencesit is impossible to move from this cell to any cell containing weeds or
to leave the grid without crossing any fencesThe fences can only be built between cells or on the boundary of the grid, i.e. on the sides of cells.
The total length of the built fences is the number of pairs of side-adjacent cells such that there is a fence built on their common side plus the number of sides of cells on the boundary of the grid which have fences built on them.
Find the minimum required total length of fences that need to be built.*//

import java.util.*;

public class Main
{
    public static void main(String[] args) {
        Scanner in  = new Scanner(System.in);
        int tc = in.nextInt();
        int a,b,fences;
        for (int i = 0; i < tc; i++) {
            int len = in.nextInt();
            int br = in.nextInt();
            int n = in.nextInt();
            fences = 0;
            HashMap<Integer,List<Integer>> map = new HashMap<Integer,List<Integer>>();

            for (int j = 0; j < n; j++) {
                a = in.nextInt();
                b = in.nextInt();
                if(map.containsKey(a) == false)
                {
                    map.put(a, new ArrayList<Integer>());
                }
                map.get(a).add(b);
            }
            int temp_max = 0;
            for (int it : map.keySet() )
            {
                for (int ib : map.get(it)) 
                {
                    temp_max = 4;
                    int temp_a = it;
                    int temp_b = ib;
                    if (map.get(it).indexOf(ib-1) != -1) 
                    {
                        temp_max--;
                    }
                    
                    if (map.get(it).indexOf(ib+1) != -1) 
                    {
                        temp_max--;
                    }
                    
                    if (map.containsKey(it+1)  && map.get(it+1).indexOf(ib) != -1) 
                    {
                        temp_max--;
                    }

                    
                    if (map.containsKey(it-1)  && map.get(it-1).indexOf(ib) != -1) 
                    {
                        temp_max--;
                    }
 
                    fences = fences + temp_max;
                }
            } 
            System.out.println(fences);
        }
    }
}
