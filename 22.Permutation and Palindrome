/* You are given a string s with length n. You should find a permutation P of numbers 1 through n such that if you apply this permutation on the string s, you will get a palindromic string.
The result of applying a permutation P on the string s is a string t with length n such that for each i (1 ≤ i ≤ n), the i-th character of t is given as as t[i] = s[Pi].*/

import java.util.*;
import java.lang.*;
import java.io.*;

class Codechef
{
	public static void main (String[] args) throws java.lang.Exception
	{
		// your code goes here
Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        while (t-- > 0) {
            String s = sc.next();
            int n = s.length();

            if (n % 2 == 1) {
                Map<Character, Integer> freq = new HashMap<>();
                for (char c : s.toCharArray()) {
                    freq.put(c, freq.getOrDefault(c, 0) + 1);
                }

                int oddCount = 0;
                char oddChar = 0;
                for (char c : freq.keySet()) {
                    if (freq.get(c) % 2 == 1) {
                        oddChar = c;
                        oddCount++;
                    }
                }

                if (oddCount > 1) {
                    System.out.println("-1");
                } else if (n == 1) {
                    System.out.println("1");
                } else {
                    List<Pair> list = new ArrayList<>();
                    boolean found = false;
                    int oddIndex = -1;

                    for (int i = 0; i < n; i++) {
                        if (s.charAt(i) == oddChar && !found) {
                            oddIndex = i;
                            found = true;
                        } else {
                            list.add(new Pair(s.charAt(i), i));
                        }
                    }

                    int[] ans = new int[n];
                    ans[n / 2] = oddIndex + 1;
                    list.sort(Comparator.comparing(p -> p.ch));

                    int i = 0, j = n - 1, k = 0;
                    while (i < j) {
                        ans[i++] = list.get(k++).index + 1;
                        ans[j--] = list.get(k++).index + 1;
                    }

                    for (int val : ans) System.out.print(val + " ");
                    System.out.println();
                }

            } else {
                Map<Character, Integer> freq = new HashMap<>();
                for (char c : s.toCharArray()) {
                    freq.put(c, freq.getOrDefault(c, 0) + 1);
                }

                boolean possible = true;
                for (int count : freq.values()) {
                    if (count % 2 == 1) {
                        possible = false;
                        break;
                    }
                }

                if (!possible) {
                    System.out.println("-1");
                } else {
                    List<Pair> list = new ArrayList<>();
                    for (int i = 0; i < n; i++) {
                        list.add(new Pair(s.charAt(i), i));
                    }

                    int[] ans = new int[n];
                    list.sort(Comparator.comparing(p -> p.ch));

                    int i = 0, j = n - 1, k = 0;
                    while (i < j) {
                        ans[i++] = list.get(k++).index + 1;
                        ans[j--] = list.get(k++).index + 1;
                    }

                    for (int val : ans) System.out.print(val + " ");
                    System.out.println();
                }
            }
        }

        sc.close();
    }

    static class Pair {
        char ch;
        int index;

        Pair(char ch, int index) {
            this.ch = ch;
            this.index = index;
        }
    }
}
