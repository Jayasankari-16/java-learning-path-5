/* There are N subatomic particles lined up in a row.
There are two types: protons and electrons. Protons have a positive charge and are represented by 1, while electrons have a negative charge and are represented by 0.
Our current understanding of physics gives us a way to predict how the particles will be spaced out, if we know their charges. 
Two adjacent particles will be separated by 1 unit if they have opposite charges, and 2 units if they have the same charge.
When Chef is not in the kitchen, he is doing physics experiments on subatomic particles.
He is testing the hypothesis by having N particles in a row, and he will change the charge of a particle K times. 
In the i-th update, he will change the charge of the Qi-th particle. 
After each update, find the distance between the first and last particle.*/


import java.util.*;
import java.lang.*;
import java.io.*;

class Codechef
{
    private static BufferedReader reader=new BufferedReader(new InputStreamReader(System.in));
	private static BufferedWriter writer=new BufferedWriter(new OutputStreamWriter(System.out));
	private static long mod=(long)1E9+7L;
	
	public static void main (String[] args) throws java.lang.Exception
	{
		int tt=Integer.parseInt(reader.readLine().trim());
		while(tt-->0){
		    int[] a=parseInt(reader.readLine().trim());
		    int n=a[0], k=a[1];
		    String s=reader.readLine().trim();
		    int[] q=parseInt(reader.readLine().trim(), k);
		    int[] sc=new int[n];
		    for(int i=0;i<n;i++){
		        sc[i]=s.charAt(i)-'0';
		    }
		    int charge=0;
		    for(int i=1;i<n;i++){
		        if(sc[i]==sc[i-1]){
		            charge+=2;
		        }else{
		            charge++;
		        }
		    }
		    for(int i=0;i<k;i++){
		        if(n==1){
		            writer.write("0\n");
		            continue;
		        }
		        int idx=q[i]-1;
		        if(idx==0){
		            charge-=(sc[idx]==sc[idx+1])?2:1;
		            sc[idx]=1-sc[idx];
		            charge+=(sc[idx]==sc[idx+1])?2:1;
		        }else if(idx==n-1){
		            charge-=(sc[idx]==sc[idx-1]?2:1);
		            sc[idx]=1-sc[idx];
		            charge+=(sc[idx]==sc[idx-1]?2:1);
		        }else{
		            charge-=((sc[idx]==sc[idx-1]?2:1)+(sc[idx]==sc[idx+1]?2:1));
		            sc[idx]=1-sc[idx];
		            charge+=((sc[idx]==sc[idx-1]?2:1)+(sc[idx]==sc[idx+1]?2:1));
		        }
		        writer.write(charge+"\n");
		    }
		}
		writer.flush();
	}
	
	private static long mod(long n, long m){
	    if(n>=0){
	        return n%m;
	    }
	    return ((m-Math.abs(n)%m))%m;
	}
	
	private static void printArray(int[] nums) throws java.lang.Exception{
	    for(int i=0;i<nums.length;i++){
	        writer.write((i==0?"":" ")+nums[i]);
	    }
	    writer.write("\n");
	}
	
	private static void printArray(long[] nums) throws java.lang.Exception{
	    for(int i=0;i<nums.length;i++){
	        writer.write((i==0?"":" ")+nums[i]);
	    }
	    writer.write("\n");
	}
    
    private static int[] parseInt(String str) {
        String[] parts=str.split("\\s+");
        int[] ans=new int[parts.length];
        for(int i=0;i<ans.length;i++){
            ans[i]=Integer.parseInt(parts[i]);
        }
        return ans;
    }

    private static long[] parseLong(String str) {
        String[] parts=str.split("\\s+");
        long[] ans=new long[parts.length];
        for(int i=0;i<ans.length;i++){
            ans[i]=Long.parseLong(parts[i]);
        }
        return ans;
    }
    
    private static int[] parseInt(String str, int n) {
        int[] ans = new int[n];
        int idx = 0;
        for (int k = 0; k < str.length(); ) {
            int j = k;
            int sum = 0;
            while (j < str.length() && str.charAt(j) != ' ') {
                if (str.charAt(j) == '-') {
                    j++;
                    continue;
                }
                sum = sum * 10 + str.charAt(j) - '0';
                j++;
            }
            ans[idx++] = (str.charAt(k) == '-' ? -1 : 1) * sum;
            k = j + 1;
        }
        return ans;
    }
    
    private static long[] parseLong(String str, int n) {
        long[] ans = new long[n];
        int idx = 0;
        for (int k = 0; k < str.length(); ) {
            int j = k;
            long sum = 0L;
            while (j < str.length() && str.charAt(j) != ' ') {
                if (str.charAt(j) == '-') {
                    j++;
                    continue;
                }
                sum = sum * 10 + str.charAt(j) - '0';
                j++;
            }
            ans[idx++] = (str.charAt(k) == '-' ? -1L : 1L) * sum;
            k = j + 1;
        }
        return ans;
    }
}
